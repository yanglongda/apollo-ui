{"remainingRequest":"/Users/long/Desktop/apollo-ui/node_modules/babel-loader/lib/index.js!/Users/long/Desktop/apollo-ui/src/utils/request.js","dependencies":[{"path":"/Users/long/Desktop/apollo-ui/src/utils/request.js","mtime":1598605951758},{"path":"/Users/long/Desktop/apollo-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/long/Desktop/apollo-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Notification, MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport errorCode from '@/utils/errorCode';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'; // 创建axios实例\n\nvar service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 超时\n  timeout: 10000\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 是否需要设置 token\n  var isToken = (config.headers || {}).isToken === false;\n\n  if (getToken() && !isToken) {\n    config.headers['Authorization'] = 'Bearer ' + getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  console.log(error);\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (res) {\n  // 未设置状态码则默认成功状态\n  var code = res.data.code || 200; // 获取错误信息\n\n  var message = errorCode[code] || res.data.msg || errorCode['default'];\n\n  if (code === 401) {\n    MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(function () {\n      store.dispatch('LogOut').then(function () {\n        location.reload(); // 为了重新实例化vue-router对象 避免bug\n      });\n    });\n  } else if (code === 500) {\n    Message({\n      message: message,\n      type: 'error'\n    });\n    return Promise.reject(new Error(message));\n  } else if (code !== 200) {\n    Notification.error({\n      title: message\n    });\n    return Promise.reject('error');\n  } else {\n    return res.data;\n  }\n}, function (error) {\n  console.log('err' + error);\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["/Users/long/Desktop/apollo-ui/src/utils/request.js"],"names":["axios","Notification","MessageBox","Message","store","getToken","errorCode","defaults","headers","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","isToken","error","console","log","Promise","reject","response","res","code","data","message","msg","confirm","confirmButtonText","cancelButtonText","type","then","dispatch","location","reload","Error","title","duration"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Notification, MessageBox, Message } from 'element-ui'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\nimport errorCode from '@/utils/errorCode'\r\n\r\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\r\n  baseURL: process.env.VUE_APP_BASE_API,\r\n  // 超时\r\n  timeout: 10000\r\n})\r\n// request拦截器\r\nservice.interceptors.request.use(config => {\r\n  // 是否需要设置 token\r\n  const isToken = (config.headers || {}).isToken === false\r\n  if (getToken() && !isToken) {\r\n    config.headers['Authorization'] = 'Bearer ' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\r\n  }\r\n  return config\r\n}, error => {\r\n    console.log(error)\r\n    Promise.reject(error)\r\n})\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(res => {\r\n    // 未设置状态码则默认成功状态\r\n    const code = res.data.code || 200;\r\n    // 获取错误信息\r\n    const message = errorCode[code] || res.data.msg || errorCode['default']\r\n    if (code === 401) {\r\n      MessageBox.confirm(\r\n        '登录状态已过期，您可以继续留在该页面，或者重新登录',\r\n        '系统提示',\r\n        {\r\n          confirmButtonText: '重新登录',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }\r\n      ).then(() => {\r\n        store.dispatch('LogOut').then(() => {\r\n          location.reload() // 为了重新实例化vue-router对象 避免bug\r\n        })\r\n      })\r\n    } else if (code === 500) {\r\n      Message({\r\n        message: message,\r\n        type: 'error'\r\n      })\r\n      return Promise.reject(new Error(message))\r\n    } else if (code !== 200) {\r\n      Notification.error({\r\n        title: message\r\n      })\r\n      return Promise.reject('error')\r\n    } else {\r\n      return res.data\r\n    }\r\n  },\r\n  error => {\r\n    console.log('err' + error)\r\n    Message({\r\n      message: error.message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service\r\n"]}]}