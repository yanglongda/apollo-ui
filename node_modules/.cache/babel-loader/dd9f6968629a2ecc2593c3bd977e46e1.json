{"remainingRequest":"/Users/long/Desktop/apollo-ui/node_modules/babel-loader/lib/index.js!/Users/long/Desktop/apollo-ui/src/utils/request.js","dependencies":[{"path":"/Users/long/Desktop/apollo-ui/src/utils/request.js","mtime":1599204311680},{"path":"/Users/long/Desktop/apollo-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/long/Desktop/apollo-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { apiBase } from \"../../build/apiBase\";\nimport { Notification, MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport errorCode from '@/utils/errorCode';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'; // axios.defaults.baseURL= apiBase\n// 创建axios实例\n\nvar service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: apiBase,\n  // 超时\n  timeout: 50000\n}); // request拦截器\n// service.interceptors.request.use(config => {\n//   // 是否需要设置 token\n// //   const isToken = (config.headers || {}).isToken === false\n// //   if (getToken() && !isToken) {\n// //     config.headers['Authorization'] = 'Bearer ' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n// //   }\n// //   return config\n// // }, error => {\n// //     console.log(error)\n// //     Promise.reject(error)\n//  })\n// // // 响应拦截器\n// service.interceptors.response.use(res => {\n// // //     // 未设置状态码则默认成功状态\n//   const code = res.data.code || 200;\n// // //     // 获取错误信息\n// // //     const message = errorCode[code] || res.data.msg || errorCode['default']\n// // //     if (code === 401) {\n// // //       MessageBox.confirm(\n// // //         '登录状态已过期，您可以继续留在该页面，或者重新登录',\n// // //         '系统提示',\n// // //         {\n// // //           confirmButtonText: '重新登录',\n// // //           cancelButtonText: '取消',\n// // //           type: 'warning'\n// // //         }\n// // //       ).then(() => {\n// // //         store.dispatch('LogOut').then(() => {\n// // //           location.reload() // 为了重新实例化vue-router对象 避免bug\n// // //         })\n// // //       })\n// // //     } else \n//   if (code === 500) {   \n//       Message({\n//         message: message,\n//         type: 'error'\n//       })\n//       return Promise.reject(new Error(message))\n//     } else if (code !== 200) {\n//       Notification.error({\n//         title: message\n//       })\n//       return Promise.reject('error')\n//     } else {\n//       return res.data\n//     }\n//   },\n//   error => {\n//     console.log('err' + error)\n//     Message({\n//       message: error.message,\n//       type: 'error',\n//       duration: 5 * 1000\n//     })\n//     return Promise.reject(error)\n//   }\n// )\n\nexport default service;",{"version":3,"sources":["/Users/long/Desktop/apollo-ui/src/utils/request.js"],"names":["axios","apiBase","Notification","MessageBox","Message","store","getToken","errorCode","defaults","headers","service","create","baseURL","timeout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,OAAnC,QAAkD,YAAlD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEAP,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuB,cAAvB,IAAyC,gCAAzC,C,CACA;AACA;;AACA,IAAMC,OAAO,GAAGV,KAAK,CAACW,MAAN,CAAa;AAC3B;AACAC,EAAAA,OAAO,EAAEX,OAFkB;AAG3B;AACAY,EAAAA,OAAO,EAAE;AAJkB,CAAb,CAAhB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,OAAf","sourcesContent":["import axios from 'axios'\r\nimport {apiBase} from '../../build/apiBase'\r\nimport { Notification, MessageBox, Message } from 'element-ui'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\nimport errorCode from '@/utils/errorCode'\r\n\r\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\r\n// axios.defaults.baseURL= apiBase\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\r\n  baseURL: apiBase,\r\n  // 超时\r\n  timeout: 50000\r\n})\r\n// request拦截器\r\n// service.interceptors.request.use(config => {\r\n//   // 是否需要设置 token\r\n// //   const isToken = (config.headers || {}).isToken === false\r\n// //   if (getToken() && !isToken) {\r\n// //     config.headers['Authorization'] = 'Bearer ' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\r\n// //   }\r\n// //   return config\r\n// // }, error => {\r\n// //     console.log(error)\r\n// //     Promise.reject(error)\r\n//  })\r\n\r\n// // // 响应拦截器\r\n// service.interceptors.response.use(res => {\r\n// // //     // 未设置状态码则默认成功状态\r\n//   const code = res.data.code || 200;\r\n// // //     // 获取错误信息\r\n// // //     const message = errorCode[code] || res.data.msg || errorCode['default']\r\n// // //     if (code === 401) {\r\n// // //       MessageBox.confirm(\r\n// // //         '登录状态已过期，您可以继续留在该页面，或者重新登录',\r\n// // //         '系统提示',\r\n// // //         {\r\n// // //           confirmButtonText: '重新登录',\r\n// // //           cancelButtonText: '取消',\r\n// // //           type: 'warning'\r\n// // //         }\r\n// // //       ).then(() => {\r\n// // //         store.dispatch('LogOut').then(() => {\r\n// // //           location.reload() // 为了重新实例化vue-router对象 避免bug\r\n// // //         })\r\n// // //       })\r\n// // //     } else \r\n//   if (code === 500) {   \r\n//       Message({\r\n//         message: message,\r\n//         type: 'error'\r\n//       })\r\n//       return Promise.reject(new Error(message))\r\n//     } else if (code !== 200) {\r\n//       Notification.error({\r\n//         title: message\r\n//       })\r\n//       return Promise.reject('error')\r\n//     } else {\r\n//       return res.data\r\n//     }\r\n//   },\r\n//   error => {\r\n//     console.log('err' + error)\r\n//     Message({\r\n//       message: error.message,\r\n//       type: 'error',\r\n//       duration: 5 * 1000\r\n//     })\r\n//     return Promise.reject(error)\r\n//   }\r\n// )\r\n\r\nexport default service\r\n"]}]}